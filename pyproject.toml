[tool.poetry]
name = "nanofed"
version = "0.1.0"
description = "A lightweight federated learning library"
authors = ["camille-004 <dunningcamille@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/camille-004/nanofed"
repository = "https://github.com/camille-004/nanofed"
keywords = ["federated-learning", "deep-learning", "pytorch"]
packages = [{include = "nanofed"}]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
numpy = "^2.1.2"
pydantic = "^2.9.2"
aiohttp = "^3.10.10"
click = "^8.1.7"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
torch = ">=2.0.0"
torchvision = ">=0.15.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.8"
mypy = "^1.10.0"
pre-commit = "^3.7.1"
pytest = "^8.2.2"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.24.0"
trio = "^0.27.0"

[tool.poetry.extras]
ml = ["torch", "torchvision"]

[tool.ruff]
line-length = 79
lint.select = ["E", "F", "I", "A", "C"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short"
markers = [
    "asyncio: mark test as async",
]
